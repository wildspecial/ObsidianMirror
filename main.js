/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT_SETTINGS = {
    isMirror: false,
    vault: "",
    fileName: "ObsidianMirror.md",
    fileNameGraph: "ObsidianMirror_graph.md"
};
class ObidianMirrorPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.openedByThisPlugin = false;
        this.wroteByThisPlugin = false;
        this.activeFile = this.app.workspace.getActiveFile();
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('loading plugin');
            yield this.loadSettings();
            this.addRibbonIcon('dice', 'Sample Plugin', () => {
                new obsidian.Notice('This is a notice!');
            });
            this.addStatusBarItem().setText('Status Bar Text');
            this.addCommand({
                id: 'open-sample-modal',
                name: 'Open Sample Modal',
                // callback: () => {
                // 	console.log('Simple Callback');
                // },
                checkCallback: (checking) => {
                    let leaf = this.app.workspace.activeLeaf;
                    if (leaf) {
                        if (!checking) {
                            new SampleModal(this.app).open();
                        }
                        return true;
                    }
                    return false;
                }
            });
            this.addSettingTab(new ObsidianMirrorSettingTab(this.app, this));
            this.registerCodeMirror((cm) => {
                console.log('codemirror', cm);
            });
            this.registerDomEvent(document, 'click', (evt) => {
                console.log('click', evt);
            });
            this.registerInterval(window.setInterval(() => console.log('setInterval'), 5 * 60 * 1000));
            this.app.workspace.on('file-open', () => __awaiter(this, void 0, void 0, function* () {
                const activeLeaf = this.app.workspace.activeLeaf;
                if (!activeLeaf) {
                    return;
                }
                this.lastFile();
            }));
            this.registerEvent(this.app.vault.on('modify', (file) => this.onChangeFile(file)));
        });
    }
    onChangeFile(file) {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("this.settings.isMirror:" + this.settings.isMirror);
            console.log("vault this.settings.fileName:" + this.settings.vault + "/" + this.settings.fileName);
            console.log("vault + filnemagraph:" + this.settings.vault + "/" + this.settings.fileNameGraph);
            console.log("active file:" + this.app.workspace.getActiveFile().path);
            console.log("file.path:" + file.path);
            if (!this.openedByThisPlugin) {
                if (this.settings.isMirror && file.path == this.settings.vault + "/" + this.settings.fileName || !this.settings.isMirror && file.path == this.settings.fileNameGraph) {
                    console.log("passed");
                    this.readActiveOpenedFile();
                }
            }
            else {
                this.openedByThisPlugin = false;
            }
        });
    }
    lastFile() {
        return __awaiter(this, void 0, void 0, function* () {
            this.activeFile = this.app.workspace.getActiveFile();
            //if (this.wroteByThisPlugin) { 
            //	this.watchFileAndWrite();
            //} 
            console.log("lastFile");
            setTimeout(() => {
                //this.wroteByThisPlugin = true;
                this.watchFileAndWrite();
            }, 800);
        });
    }
    watchFileAndWrite() {
        return __awaiter(this, void 0, void 0, function* () {
            //this.wroteByThisPlugin = false;
            var activeFile = this.activeFile;
            var sideCarFile = !this.settings.isMirror ? this.app.vault.getFiles().filter(f => { return f.name == this.settings.fileName; })[0] : this.app.vault.getFiles().filter(f => { return f.path == this.settings.vault + "/" + this.settings.fileNameGraph; })[0];
            console.log("sideCarFile:");
            console.log(sideCarFile);
            if (!sideCarFile) {
                this.app.vault.create(!this.settings.isMirror ? this.settings.fileName : this.settings.vault + "/" + this.settings.fileNameGraph, "");
                console.log("passato");
                sideCarFile = this.settings.isMirror ? this.app.vault.getFiles().filter(f => { return f.name == this.settings.fileName; })[0] : this.app.vault.getFiles().filter(f => { return f.path == this.settings.vault + "/" + this.settings.fileNameGraph; })[0];
            }
            if (activeFile != null && activeFile != undefined) {
                console.log(`this is active file ${activeFile.name}`);
                //var fileNameToOpen = await (await this.app.vault.read(sideCarFile)).trim();
                //var fileToOpen: TFile = this.app.vault.getFiles().filter(f => { return f.name == fileNameToOpen })[0];
                //if (fileToOpen) {
                //if (fileToOpen?.name != this.app.workspace.getActiveFile().name) {
                yield this.app.vault.modify(sideCarFile, activeFile.name);
                //}
                //} 
            }
        });
    }
    readActiveOpenedFile() {
        return __awaiter(this, void 0, void 0, function* () {
            var sideCarFile = this.settings.isMirror ? this.app.vault.getFiles().filter(f => { return f.name == this.settings.fileName; })[0] : this.app.vault.getFiles().filter(f => { return f.name == this.settings.fileNameGraph; })[0];
            console.log("sideCar:" + sideCarFile.name);
            var fileNameToOpen = yield (yield this.app.vault.read(sideCarFile)).trim();
            var fileToOpen = this.app.vault.getFiles().filter(f => { return f.name == fileNameToOpen; })[0];
            if (fileToOpen) {
                if ((fileToOpen === null || fileToOpen === void 0 ? void 0 : fileToOpen.name) != this.app.workspace.getActiveFile().name) {
                    this.openedByThisPlugin = true;
                    this.app.workspace.activeLeaf.openFile(fileToOpen);
                    new obsidian.Notice(`ObsidianMirror: ${fileToOpen.basename} file opened`, 5000);
                }
                else {
                    console.log("invalid file found or already opened");
                }
            }
        });
    }
    onunload() {
        console.log('unloading plugin');
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}
class SampleModal extends obsidian.Modal {
    constructor(app) {
        super(app);
    }
    onOpen() {
        let { contentEl } = this;
        contentEl.setText('Woah!');
    }
    onClose() {
        let { contentEl } = this;
        contentEl.empty();
    }
}
class ObsidianMirrorSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        const { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Obsidian Mirror - Settings' });
        new obsidian.Setting(containerEl)
            .setName('Is this Obsidian instance a Mirror?')
            .setDesc('If enabled, this instance will "follow" whatever the main Obsidian instance has opened' +
            'PS: In order to launch multiple Obsidian instances you have to follow a workaround suggested in this community Forum')
            .addToggle((toggle) => toggle.setValue(this.plugin.settings.isMirror).onChange((value) => {
            this.plugin.settings.isMirror = value;
            this.plugin.saveData(this.plugin.settings);
            this.display();
        }));
        new obsidian.Setting(containerEl)
            .setName('Vault Name')
            .setDesc('Please enter the Vault name your are using in the main instance of Obsidian')
            .addText((text) => text
            .setPlaceholder('MyVaultName')
            .setValue(this.plugin.settings.vault)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.vault = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Mirror File')
            .setDesc('Please enter the file name you want to use. This plugin will use it in order to watch the active file opned. PS: You can use a name of your choice')
            .addText((text) => text
            .setPlaceholder('ObsidianMirror.md')
            .setValue(this.plugin.settings.fileName)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.fileName = value;
            this.plugin.settings.fileNameGraph = value.substring(0, value.length - 2) + "_graph.md";
            yield this.plugin.saveSettings();
        })));
    }
}

module.exports = ObidianMirrorPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
